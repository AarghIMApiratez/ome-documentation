Build System
============

.. topic:: Overview

	The page goes into details about how the build system is configured.

.. _Ant: http://ant.apache.org
.. _Ivy: http://ant.apache.org/ivy

OMERO mostly uses an Ant_-based build with dependency management provided by
Ivy_. :doc:`Native code </developers/Cpp>` is built using Cmake and Python
uses the traditional distutils/setuptools tools.

Structure of the build
----------------------

This is an (abbreviated) snapshot of the structure of the filesystem for
OMERO::

      OMERO_SOURCE_PREFIX
      |
      |-- build.xml .......................... Top-level build file
      |
      |-- build.py ........................... Python wrapper to handle OS-specific configuration
      |
      |-- omero.class ........................ Self-contained Ant launcher
      |
      |--etc ................................. Configuration folder
      |   |-- grid ........................... Deployment files folder
      |   |-- ivysettings.xml ................ Main Ivy configuration file
      |   |-- hibernate.properties
      |   |-- local.properties.example
      |   |-- logback.xml
      |   |-- omero.properties
      |   \-- profiles
      |
      |-- examples ........................... User examples
      |
      \components
        |
        |--<component-name> .................. Each component has this same basic structure.
        |    |-- build.xml ................... Build file
        |    |-- ivy.xml ..................... Jar dependencies
        |    |-- test.xml .................... Test dependencies
        |    |-- src ......................... Source code
        |    |-- resources ................... Other files of interest
        |    |-- test ........................ Test source code and test resources
        |    \-- target ...................... Build output (deleted on clean)
        |
        |  NOTABLE COMPONENTS
        |
        |-- model ............................ The model component is special in that in produces
        |                                      a jar specific to your database choice: model-psql.jar
        |                                      The generated `ome.model.*` files contain Hibernate
        |                                      annotations for object-relational mapping.
        |
        |-- blitz ............................ The blitz component also performs code generation
        |    |                                 producing artifacts for Java, Python, and C++.
        |    \ blitz_tools.py ................ OMERO-specific SCons Environment definition
        |                                      and other build tools.
        |     
        |--tools ............................. Other server-components with special build needs.
        |    |--build.xml .................... Build scripts
        |    |
        |    \--<tool-name>
        |         |--build.xml ............... Build file
        |         \--ivy.xml ................. Jar dependencies
        |
        \--antlib ............................ Special component which is not built, but referenced by the build
            |
            \--resources ..................... Build resources
                |--global.xml ................ Global build properties
                |--hibernate.xml
                |--lifecycle.xml ............. Ivy-related targets
                \--version.xml ............... Version properties

.. note::
    User examples are explained under :doc:`/developers/GettingStarted`

Unfortunately, just the above snapshot of the code repository omits some
of the most important code. Many MB of source code is generated both by
our own :sourcedir:`DSLTask <components/dsl>` as well as by
the Ice_ ``slice2java``, ``slice2cpp``, and
``slice2py`` code generators. These take an intermediate representation
of the :model_doc:`OME-Model <ome-xml/>` and generate our |OmeroModel|.
This code is not available in git, but once built, can be found in all the
directories named "generated".

Build tools
-----------

Ant
^^^

``./build.py`` is a complete replacement for your local ant install. In
many cases on and on most OS, you will be fine running :program:`ant`. If you
have any issues (for example ``OutOfMemory``) , please use
``./build.py`` instead. **However, only use one or the other; do
not mix calls between the two.**

The main build targets are defined in the top-level :file:`build.xml` file.
All available targets can be listed using::

    ./build.py -p

Each of the component contains a :file:`build.xml` and can be built directly
using::

    ./build.py -f components/server/build.xml

This will call the default ``dist`` target for each component.

Ivy
^^^

-  Resolvers are key to how Ivy functions. Currently, the default
   resolver is called "omero-resolver" and simply looks in our
   repository (``./lib/repository``) for the jars which were downloaded
   from git. Multi-resolvers can be defined (as granular as for an
   individual jar) in order to pick up the latest version of whatever
   library from HTTP, |SSH|, or from the local file system.

-  OMERO\_HOME/lib/cache : in order to determine the transitive closure
   of all dependencies, Ivy "resolves" each ivy.xml and stores the
   resolved ivy.xml in its cache (in our build, ``./lib/cache``) to
   speed up other processes. However, when changing the Ivy
   configuration (``./etc/ivyconf.xml``) or version number
   (``etc/omero.properties->omero.version``) the cache can become stale.
   This should not happen, but currently does. It may be beneficial for
   the time being to call ``ant clean`` from the top-level build which
   will delete the cache.

.. _build#OmeroTools:

OmeroTools
^^^^^^^^^^

Similarly, the ant build alone is not enough to describe all the
products which get built. Namely, the builds for the non-Java components
stored under :sourcedir:`components/tools`
are a bit more complex. Each tools component installs its artifacts to
the tools/target directory which is copied **on top of** the
OMERO\_HOME/dist top-level distribution directory.

Code-signing
^^^^^^^^^^^^

The OMERO source tree includes a self-signed certificate for testing
OMERO.insight webstart. This is not used by default to avoid problems with
double signing official releases. The "release-webstart-signed" target can be
used, alternatively see :source:`docs/hudson/OMERO.sh` and/or
:ref:`server_webstart_insight_codesign`.


Jenkins
^^^^^^^

The OME project currently uses Jenkins_ as
a continuous integration server available :jenkins:`here <>`, so many
binary packages can be downloaded without compiling them yourself. See the :devs_doc:`Continuous Integration documentation <ci-omero.html>` for further details.

Server build
------------

The default ant target (``build-default``) will build the OMERO system and
copy the necessary components for a binary distribution to the :file:`dist`
directory. Below is a comparison of what is taken from the build, where
it is put, and what role it plays in the distribution.

.. list-table::
    :header-rows: 1

    * - OMERO_SOURCE_PREFIX
      - OMERO_SOURCE_PREFIX/dist
      - Comments
    * - components/blitz/target/blitz.jar
      - :file:`lib/server`
      - Primary Ice servants
    * - components/blitz/target/server.jar
      - lib/server
      - Primary server logic
    * - components/tools/OmeroCpp/lib*
      - lib/
      - Native shared libraries
    * - components/tools/OmeroPy/build/lib
      - lib/python
      - Python libraries
    * - lib/repository/<some>
      - lib/client & lib/server
      - Libraries needed for the build
    * - etc/
      - etc/
      - Configuration
    * - :file:`sql/*.sql`
      - sql/
      - SQL scripts to prepare the database
    * - <javadoc/>
      - docs/api
      - (Optional) Javadocs produced with "java omero javadoc"


.. note::
    By default, |OmeroCpp| is not built. Use ``build-all`` for that.

These files are then zipped to OMERO.server-<version>.zip via ``release-zip``
