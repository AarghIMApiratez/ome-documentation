OMERO.server Linux installation walk-through
============================================

This page walks through the process of installing OMERO.server on a
machine using a Debian-based Linux distribution. For other UNIX or UNIX-like
platforms, please refer to the default instructions on the
:doc:`server-installation` page.

.. note:: 
    This page is generally applicable to Debian and Ubuntu installations,
    although there are some small differences which are noted when applicable
    during the walk-through.

Distributions
-------------

Whilst OMERO can be made to work on a wide range of Linux distributions,
installation using a package manager is the most straightforward way to
get an OMERO installation up and running. However, due to changes
between releases of Ubuntu and Debian, there are some restrictions over
which version of OMERO can be easily installed using the package manager
to install and manage the OMERO prerequisites.

================== ================= ==============
Distribution       ZeroC Ice version OMERO version
================== ================= ==============
Debian 7.0               3.4              4.4.x
Debian 6.0               3.3          4.3.x, 4.4.x
------------------ ----------------- --------------
Ubuntu 12.04 (LTS)       3.4              4.4.x
Ubuntu 11.10             3.4              4.4.x
Ubuntu 11.04             3.3          4.3.x, 4.4.x
Ubuntu 10.04 (LTS)       3.3          4.3.x, 4.4.x
================== ================= ==============

.. note:: 
    ZeroC_ Ice can always be built from source code for specific platforms.

In the remainder of this guide you should adjust version numbers to suit
the distribution that you are targeting.

Prerequisites
-------------

You require at least a clean minimal Debian or Ubuntu installation and a
non-root user account that has sudo privileges.

.. note::
    For Ubuntu you need to enable the **universe** repository.  This
    should be enabled by default.  If not enabled, it may be enabled by
    editing :file:`/etc/apt/sources.list` directly, in which case the
    entries may already exist but are commented out, or by using
    Synaptic (10.04 & 10.10) or Ubuntu Software Center (11.04 onwards).

Update your package lists to ensure that you get the latest packages.

    $ sudo apt-get update

Java
^^^^

The OMERO server works with the OpenJDK Java runtime provided by the
distribution.  To install::

    $ sudo apt-get install openjdk-7-jre

If you wish to use Oracle Java rather than OpenJDK, this is possible
but not required.  It is no longer provided by Debian or Ubuntu for
licensing reasons.  To install Oracle Java, see the `Oracle website
<http://www.oracle.com/technetwork/java/javase/downloads/index.html>`_.
It is also possible to build Oracle Java packages which better
integrate with the package manager and the system using `oab-java6
<https://github.com/flexiondotorg/oab-java6>`_.  However, note that
both of these options will leave you without regular
distribution-provided security updates, and so are not recommended.


OMERO dependencies
^^^^^^^^^^^^^^^^^^

Now you are ready to install the rest of your prerequisite software
packages::

    $ sudo apt-get install unzip build-essential mencoder
    $ sudo apt-get install python python-imaging python-numpy python-tables python-matplotlib
    $ sudo apt-get install zeroc-ice34
    $ sudo apt-get install postgresql
    $ sudo apt-get install apache2 libapache2-mod-fastcgi

.. note::

    On Ubuntu 11.04 and earlier, ``python-tables`` does not install. You need
    to install ``liblzo`` otherwise OMERO.tables will fail to start::

        $ sudo apt-get install liblzo2-2

.. note::

    Current stable releases of Debian and Ubuntu provide Ice 3.4.
    Your distribution may provide a difference Ice version.  Newer
    distributions may provide ``zeroc-ice35`` while older ones may
    provide ``zeroc-ice33``.

OMERO installation
------------------

Once the prerequisites are installed and configured, the OMERO.server can be
set up. First, a home needs to be created for the server and this directory
moved into. For example, to install OMERO locally into a directory called
'apps' in your home directory, use the following::

    $ mkdir -p ~/apps/OMERO
    $ cd ~/apps/OMERO

OMERO |release|
^^^^^^^^^^^^^^^

Release versions of OMERO.server can downloaded from the
:downloads:`OMERO downloads <>` page. Assuming that you downloaded
a release version of OMERO.server, extract it from the zip archive:

.. parsed-literal::

    $ unzip OMERO.server-|release|-ice34-byy.zip

Give your OMERO software install a short name to save some typing later,
to reflect what you set :envvar:`OMERO_PREFIX` to in the
:ref:`linux_configuration` section, below::

.. parsed-literal::

    $ ln -s OMERO.server-|release|-ice34-byy  OMERO.server

This will also ease installation of newer versions of the server at a
later date, by simply updating the link.

Development server
^^^^^^^^^^^^^^^^^^

.. include:: development-server

.. _linux_configuration:

Configuration
-------------

Environment variables
^^^^^^^^^^^^^^^^^^^^^

If using distribution-provided packages, it should not be necessary to
set any environment variables.  However, if using third-party packages
for any required components, several variables may require setting in
order for them to function correctly.

There are several methods for setting environment variables; which is
most appropriate will depend upon how the OMERO server is started.
Options include:

:file:`/etc/security/pam_env.conf`
  Global environment set at login by PAM
:file:`/etc/profile` or :file:`/etc/profile.d/omero`
  Global Bourne shell defaults (also used by derived shells such as :program:`bash` and :program:`zsh`)
:file:`~/.profile`
  User's Bourne shell defaults (also used by derived shells)
:file:`/etc/bash.bashrc`
  Global :program:`bash` defaults
:file:`~/.bashrc`, :file:`~/.bash_profile` or :file:`~/.bash_login`
  User's :program:`bash` configuration.

If OMERO is started as a service using an init script, a global
setting should be preferred.  If being started by hand using a
particular user, a user-specific configuration file may be more
appropriate.

The following environment variables may be configured:

:envvar:`LD_LIBRARY_PATH` (Linux) or :envvar:`DYLD_LIBRARY_PATH` (MacOS X)
  The Ice and PostgreSQL libraries must be on the library search path.
  If using the packages provided by your distribution, this will
  already be the case.  If using third-party binary distributions the
  :file:`lib` (or :file:`lib64` if present and using a 64-bit system)
  directory for each will require adding to the library search path.
:envvar:`OMERO_PREFIX`
  This is not strictly required, but may be set for convienience to
  point to the OMERO server installation, and is used in this
  documentation as a shorthand for the installation path.
:envvar:`PATH`
  The search path must include the programs :program:`java`,
  :program:`python`, :program:`icegridnode` and PostgreSQL commands
  such as :program:`psql`.  If using the packages provided by your
  distribution, this will already be the case.  If using third-party
  binary distributions such as the ZeroC Ice package, Oracle Java, or
  PostgreSQL, the :file:`bin` directory for each will require adding
  to the path.
:envvar:`PYTHONPATH`
  The Ice :file:`python` directory much be made available to python.
  If using the Ice packages provided by your distribution, this will
  already be the case.  If using the ZeroC ice package, add the
  :file:`python` directory to the python path.

.. warning::
    The :envvar:`OMERO_HOME` environment variable is used internally by OMERO.
    Unless you really know what you are doing, it is strongly recommended that you
    do not set this variable (see :doc:`/sysadmins/omero-home-prefix` for details).
    You can use a different name of your choice instead, indicated by :envvar:`OMERO_PREFIX` in this
    documentation.

After making any needed changes, either source the corresponding file
or log back in for them to take effect.  Run ``env`` to check them.


Database creation
^^^^^^^^^^^^^^^^^

Now you need to configure your prerequisites so that they are ready for
OMERO to make use of. For the purposes of this walk-through you can use
the following dummy data for the user account::

    U: db_user 
    P: db_password
    DB: omero_database

.. note::
    For a live or public server install these values should be altered
    to reflect your security requirements. You should also consider locking
    down your server machine but that is outside the scope of this document.

Set up PostgreSQL::

    $ sudo -u postgres createuser -P -D -R -S db_user
    $ sudo -u postgres createdb -O db_user omero_database
    $ sudo -u postgres createlang plpgsql omero_database

Check that a database called "omerodb" has been created::

    $ psql -h localhost -U db_user -l

Update PostgreSQL host-based authentication to accept remote
connections::

    $ sudo sed '/127.0.0.1/s/md5/trust/' /etc/postgresql/9.1/main/pg_hba.conf \
        > pg_hba.conf && sudo mv pg_hba.conf /etc/postgresql/9.1/main/pg_hba.conf

.. note::
    The backslash '\\' in the sed command above is used merely to
    indicate a line-break and should not be included in the executed command

Restart PostgreSQL::

    $ sudo /etc/init.d/postgresql restart

Use netstat to verify that there is something listening on port 5432,
this should be your PostgreSQL server::

    $ netstat -an | egrep '5432.*LISTEN'

which should display a line similar to the following::

    tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN


OMERO.server
^^^^^^^^^^^^

Now you can configure OMERO.server so that it can connect to the PostgreSQL
database::

    $ omero config set omero.db.name 'omero_database'
    $ omero config set omero.db.user 'db_user'
    $ omero config set omero.db.pass 'db_password'

.. note::
    If you altered any of these values earlier then you will need to
    change them to reflect your requirements

You can also check the values that have been set using::

    $ omero config get

Create a home for your OMERO data. For example, to install the OMERO data
locally into :file:`~/apps/OMERO/OMERO.data`, use the following command::

    $ mkdir ~/apps/OMERO/OMERO.data

Configure OMERO to find the data location::

    $ omero config set omero.data.dir ~/apps/OMERO/OMERO.data

You can now configure the empty PostgreSQL database using Omero's db
script. You can accept the defaults for the first few values and enter a
suitable password as required when prompted, e.g. "root\_password::

    $ omero db script

.. |sqlfile| replace:: OMERO\ |version|\ __0.sql

The output of this should be a file named, e.g. |sqlfile| file
in your current directory. You can now tell PostgreSQL to configure your
new database

.. parsed-literal::

    $ psql -h localhost -U db_user omero_database < |sqlfile|

At this point you should see a whole load of output from PostgreSQL as it
installs the new OMERO database.

If all has gone well, you should now be able to start OMERO.server using
the following command::

    $ omero admin start

You should now be able to connect to your OMERO.server using an OMERO
client such as OMERO.insight and the following credentials::

    U: root 
    P: root_password

OMERO.web
^^^^^^^^^

To connect with the webclient or webadmin using the included Django
development server::

    $ omero config set omero.web.application_server development
    $ omero config set omero.web.debug True

You should be able to start the Web server with::

    $ omero web start
    Starting django development webserver...
    Validating models...
    0 errors found

    Django version 1.1.1, using settings 'omeroweb.settings'
    Development server is running at http://0.0.0.0:4080/
    Quit the server with CONTROL-C.
